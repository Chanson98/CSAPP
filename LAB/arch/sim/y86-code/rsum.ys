# Execution begins at address 0
  .pos 0
  irmovq stack, %rsp # Set up stack pointer
  call main # Execute main program
  halt # Terminate program



# Sample linked list
.align 8

ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0

main: 
  irmovq ele1, %rdi
  call rsum_list
  ret
    
#/* rsum_list - Recursive version of sum_list */
#long rsum_list(list_ptr ls)
#{
#   if (!ls)
#       return 0;
#   else {
#       long val = ls->val;
#       long rest = rsum_list(ls->next);
#       return val + rest;
#   }
#}

rsum_list:
  pushq %rbx
  rrmovq %rdi, %rbx
  irmovq $8, %r9
  xorq %rax, %rax
  andq %rdi, %rdi
  je L6
  addq %r9, %rdi
  mrmovq (%rdi), %rdi
  call rsum_list
  mrmovq (%rbx), %r10
  addq %r10,%rax
L6: 
  popq %rbx
  ret



# Stack starts here and grows to lower addresses
  .pos 0x200
stack:

